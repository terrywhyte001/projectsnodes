{
  "openapi": "3.0.0",
  "info": {
    "title": "Project 2 API",
    "version": "1.0.0",
    "description": "API documentation for Project 2 Part 2 with OAuth"
  },
  "servers": [
    { "url": "https://your-render-app.onrender.com" }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Vehicle": {
        "type": "object",
        "properties": {
          "make": { "type": "string" },
          "model": { "type": "string" },
          "year": { "type": "integer" },
          "price": { "type": "number" },
          "mileage": { "type": "number" },
          "color": { "type": "string" },
          "condition": { "type": "string" }
        },
        "required": ["make","model","year","price"]
      },
      "User": {
        "type": "object",
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string" },
          "googleId": { "type": "string" }
        },
        "required": ["name","email"]
      }
    }
  },
  "paths": {
    "/vehicles": {
      "get": {
        "summary": "Get all vehicles",
        "responses": { "200": { "description": "List of vehicles" } }
      },
      "post": {
        "summary": "Create a new vehicle (Protected)",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Vehicle" } }
          }
        },
        "responses": {
          "201": { "description": "Vehicle created" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" }
        }
      }
    },
    "/vehicles/{id}": {
      "get": {
        "summary": "Get vehicle by ID",
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": { "200": { "description": "Vehicle details" }, "404": { "description": "Not found" } }
      },
      "put": {
        "summary": "Update vehicle (Protected)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/Vehicle" } }
          }
        },
        "responses": {
          "200": { "description": "Vehicle updated" },
          "400": { "description": "Validation error" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Not found" }
        }
      },
      "delete": {
        "summary": "Delete vehicle (Protected)",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          { "name": "id", "in": "path", "required": true, "schema": { "type": "string" } }
        ],
        "responses": {
          "200": { "description": "Vehicle deleted" },
          "401": { "description": "Unauthorized" },
          "404": { "description": "Not found" }
        }
      }
    },
    "/users": {
      "get": { "summary": "Get all users", "responses": { "200": { "description": "List of users" } } }
    },
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/User" } }
          }
        },
        "responses": { "201": { "description": "User registered" }, "400": { "description": "Validation error" } }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login and receive JWT token",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "type": "object",
              "properties": {
                "email": { "type": "string" },
                "password": { "type": "string" }
              },
              "required": ["email","password"]
            }
          }
        },
        "responses": { "200": { "description": "JWT token returned" }, "400": { "description": "Invalid credentials" } }
      }
    }
  }
}

